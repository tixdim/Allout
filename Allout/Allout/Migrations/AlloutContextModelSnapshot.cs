// <auto-generated />
using System;
using Allout.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Allout.Migrations
{
    [DbContext(typeof(AlloutContext))]
    partial class AlloutContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Allout.DataAccess.Core.Models.AuctionRto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LotName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NowCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserWhoUploadId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserWhoUploadId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.AuctionStatusModerationRto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuctionStatusModerations");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.BuyLotRto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuctionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserWhoBuyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserWhoBuyId");

                    b.ToTable("BuyLots");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.UserBalanceRto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Balance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserBalances");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.UserCommentRto", b =>
                {
                    b.Property<int>("UserWhoSendCommentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserWhoGetCommentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserWhoSendCommentId", "UserWhoGetCommentId");

                    b.HasIndex("UserWhoGetCommentId");

                    b.HasIndex("UserWhoSendCommentId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.UserRto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.UserStarRto", b =>
                {
                    b.Property<int>("UserWhoSendStarId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserWhoGetStarId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserWhoSendStarId", "UserWhoGetStarId");

                    b.HasIndex("UserWhoGetStarId");

                    b.HasIndex("UserWhoSendStarId");

                    b.ToTable("UserStars");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.AuctionRto", b =>
                {
                    b.HasOne("Allout.DataAccess.Core.Models.AuctionStatusModerationRto", "Status")
                        .WithMany("Auctions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allout.DataAccess.Core.Models.UserRto", "UserWhoUpload")
                        .WithMany("UserWhoUploads")
                        .HasForeignKey("UserWhoUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("UserWhoUpload");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.BuyLotRto", b =>
                {
                    b.HasOne("Allout.DataAccess.Core.Models.AuctionRto", "Auction")
                        .WithMany("BuyLots")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Allout.DataAccess.Core.Models.UserRto", "UserWhoBuy")
                        .WithMany("UserWhoBuys")
                        .HasForeignKey("UserWhoBuyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("UserWhoBuy");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.UserBalanceRto", b =>
                {
                    b.HasOne("Allout.DataAccess.Core.Models.UserRto", "User")
                        .WithOne("Balance")
                        .HasForeignKey("Allout.DataAccess.Core.Models.UserBalanceRto", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.UserCommentRto", b =>
                {
                    b.HasOne("Allout.DataAccess.Core.Models.UserRto", "UserWhoGetComment")
                        .WithMany("UserWhoGetComments")
                        .HasForeignKey("UserWhoGetCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Allout.DataAccess.Core.Models.UserRto", "UserWhoSendComment")
                        .WithMany("UserWhoSendComments")
                        .HasForeignKey("UserWhoSendCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserWhoGetComment");

                    b.Navigation("UserWhoSendComment");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.UserStarRto", b =>
                {
                    b.HasOne("Allout.DataAccess.Core.Models.UserRto", "UserWhoGetStar")
                        .WithMany("UserWhoGetStars")
                        .HasForeignKey("UserWhoGetStarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Allout.DataAccess.Core.Models.UserRto", "UserWhoSendStar")
                        .WithMany("UserWhoSendStars")
                        .HasForeignKey("UserWhoSendStarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserWhoGetStar");

                    b.Navigation("UserWhoSendStar");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.AuctionRto", b =>
                {
                    b.Navigation("BuyLots");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.AuctionStatusModerationRto", b =>
                {
                    b.Navigation("Auctions");
                });

            modelBuilder.Entity("Allout.DataAccess.Core.Models.UserRto", b =>
                {
                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("UserWhoBuys");

                    b.Navigation("UserWhoGetComments");

                    b.Navigation("UserWhoGetStars");

                    b.Navigation("UserWhoSendComments");

                    b.Navigation("UserWhoSendStars");

                    b.Navigation("UserWhoUploads");
                });
#pragma warning restore 612, 618
        }
    }
}
